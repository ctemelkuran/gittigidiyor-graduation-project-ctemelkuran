package dev.patika.loanapplicationsystem.service;

import dev.patika.loanapplicationsystem.dto.CustomerDTO;
import dev.patika.loanapplicationsystem.entity.CreditScore;
import dev.patika.loanapplicationsystem.entity.Customer;
import dev.patika.loanapplicationsystem.exceptions.CustomerAlreadyExistsException;
import dev.patika.loanapplicationsystem.exceptions.CustomerNotFoundException;
import dev.patika.loanapplicationsystem.mapper.CustomerMapper;
import dev.patika.loanapplicationsystem.repository.CustomerRepository;
import dev.patika.loanapplicationsystem.service.validators.CustomerValidator;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;

import javax.persistence.EntityNotFoundException;
import java.util.*;
import java.util.stream.Collectors;

import static dev.patika.loanapplicationsystem.util.ErrorMessageConstants.CUSTOMER_NOT_FOUND;

@Service
@RequiredArgsConstructor
public class CustomerService {
    private final CustomerRepository customerRepository;
    @Autowired
    private CustomerMapper customerMapper;
    @Autowired
    RestTemplate restTemplate;

    static final String CREDIT_SCORE_ENDPOINT = "http://localhost:8090/api/credit-scores/";

    /**
     * Creates a new customer and saves to database
     *
     * @param customerDTO the input DTO object to save a new customer
     * @return the saves customer object {@link Optional<CustomerDTO>}
     */
    @Transactional
    public Optional<CustomerDTO> saveCustomer(CustomerDTO customerDTO) {

        // Validate input, especially National ID
        this.validateRequest(customerDTO);

        // Check if the customer already exists
        boolean isExists = customerRepository.existsByIdNumber(customerDTO.getIdNumber());

        if (isExists) {
            throw new CustomerAlreadyExistsException("Customer with National Id: "
                    + customerDTO.getIdNumber() + " is already exists!");
        }

        // Credit Score got set with mapper
        Customer customer = customerMapper.mapFromCustomerDTOtoCustomer(customerDTO);

        // set credit score
        // customer.setCustomerCreditScore(getCreditScore(customer.getIdNumber()));

        customerRepository.save(customer);
        return Optional.of(customerMapper.mapFromCustomerToCustomerDTO(customer));
    }

    /**
     * Gets the credit score value from credit-score-system
     *
     * @param customerIdNumber
     * @return
     */
    public int getCreditScore(Long customerIdNumber) {
        long lastDigit = customerIdNumber%10;
        // get credit score from another service
        CreditScore creditScore = restTemplate.getForObject(CREDIT_SCORE_ENDPOINT+lastDigit, CreditScore.class);

        if (creditScore != null) {
            return creditScore.getCreditScore();
        }
        else
            throw new NullPointerException("Credit Score is null");
    }


    /**
     * Find all customer that are saved in the database.
     *
     * @return {@link Set<CustomerDTO>} set of customers
     */
    @Transactional(readOnly = true)
    public Set<CustomerDTO> getAllCustomers() {

        return customerRepository.findAll()
                .stream()
                .map(customerMapper::mapFromCustomerToCustomerDTO)
                .collect(Collectors.toSet());
    }

    /**
     * Updates the already existed customer
     *
     * @param customerDTO object is taken as input to update {@link Customer} data.
     * @param id is autogenerated Id of Customer object
     * @return
     */
    @Transactional
    public Optional<CustomerDTO> updateCustomer(CustomerDTO customerDTO, long id) {

        if (!customerRepository.existsById(id)){
            throw new CustomerNotFoundException("Customer not found with id: "+ id);
        }

        // Validate Customer input such as National Id Number
        this.validateRequest(customerDTO);

        boolean isExists = customerRepository.existsByIdNumber(customerDTO.getIdNumber());

        if (!isExists) {
            throw new CustomerNotFoundException(String.format(CUSTOMER_NOT_FOUND , customerDTO.getIdNumber()));
        }

        Customer customer = customerMapper.mapFromCustomerDTOtoCustomer(customerDTO);
        customer.setId(id);
        // customer.setCustomerCreditScore(getCreditScore(customer.getIdNumber()));
        CustomerDTO updatedCustomerDTO =
                customerMapper.mapFromCustomerToCustomerDTO(customerRepository.save(customer));

        return Optional.of(updatedCustomerDTO);
    }


    /**
     * Customer national ID number requires valdiation
     * @param customerDTO object is taken to validate ID Number of customer
     */
    private void validateRequest(CustomerDTO customerDTO) {
        CustomerValidator.validateNationalId(customerDTO.getIdNumber());
    }

    @Transactional(readOnly = true)
    public CustomerDTO findById(long id){
        Customer customer = customerRepository.findById(id).orElseThrow(
                () -> new CustomerNotFoundException(String.format(CUSTOMER_NOT_FOUND, id)));

        return customerMapper.mapFromCustomerToCustomerDTO(customer);
    }


    /**
     * Deletes a specific course according to {@literal id} number.
     *
     * @param id primary key of the customer entity
     * @return success message in String type with {@literal id} included
     */
    @Transactional
    public String deleteById(long id) {

        Customer foundCustomer = customerRepository.findById(id)
                .orElseThrow(() -> new CustomerNotFoundException("Customer not found with id: "+ id));

        customerRepository.delete(foundCustomer);
        return "Customer deleted with id: " + id;
    }


}

